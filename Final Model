<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exo-Trace AI Platform</title>
    
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
    
    <script>
        // Custom Tailwind Configuration for Colors, Fonts, and Animations
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'bg-dark': '#010409',      
                        'card-bg': 'rgba(23, 33, 49, 0.65)', 
                        'primary-blue': '#22D3EE',  
                        'secondary-green': '#4ADE80',
                        'accent-orange': '#FB923C', 
                        'text-light': '#E2E8F0',     
                        'text-muted': '#94A3B8',    
                        'neon-pink': '#FF69B4',     
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        mono: ['Space Mono', 'monospace'],
                    },
                    keyframes: {
                        glow: {
                            '0%, 100%': { boxShadow: '0 0 5px rgba(66, 230, 149, 0.7), 0 0 10px rgba(66, 230, 149, 0.5)' },
                            '50%': { boxShadow: '0 0 10px rgba(66, 230, 149, 1), 0 0 20px rgba(66, 230, 149, 0.8)' },
                        },
                        pulseBorder: {
                            '0%, 100%': { boxShadow: '0 0 8px rgba(34, 211, 238, 0.6), 0 0 15px rgba(34, 211, 238, 0.3) inset' },
                            '50%': { boxShadow: '0 0 12px rgba(34, 211, 238, 0.8), 0 0 20px rgba(34, 211, 238, 0.5) inset' },
                        }
                    },
                    animation: {
                        glow: 'glow 2s ease-in-out infinite alternate',
                        pulseBorder: 'pulseBorder 3s ease-in-out infinite alternate',
                    }
                }
            }
        }
    </script>
    
    <style>
        /* Base Background and Glassmorphism */
        body {
            background-color: #010409;
            background-image: url('https://images.unsplash.com/photo-1517976159654-e7ddb56658bb?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
        }

        .glass-card {
            background-color: rgba(23, 33, 49, 0.65);
            backdrop-filter: blur(12px) brightness(1.1);
            border-radius: 1.5rem;
            border: 1px solid rgba(34, 211, 238, 0.4);
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.3), 0 0 20px rgba(34, 211, 238, 0.15) inset;
        }
        
        /* Neon Glows */
        .glowing-text { text-shadow: 0 0 8px rgba(66, 230, 149, 0.8); }

        .habitable-score-circle {
            background: radial-gradient(circle at center, rgba(66, 230, 149, 0.2) 0%, transparent 70%);
            animation: pulseBorder 3s ease-in-out infinite alternate;
        }

        /* Chart/Data Placeholder Styles */
        .chart-placeholder {
            min-height: 250px;
            background-image: 
                linear-gradient(to right, rgba(34, 211, 238, 0.15) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(34, 211, 238, 0.15) 1px, transparent 1px);
            background-size: 20px 20px;
            border: 1px solid rgba(34, 211, 238, 0.4);
        }

        /* Nav item active state */
        .nav-item.active {
            border-bottom: 3px solid #22D3EE;
            color: #22D3EE;
            text-shadow: 0 0 5px #22D3EE;
        }

        /* Custom scrollbar matching the theme */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: rgba(23, 33, 49, 0.5);
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #22D3EE;
            border-radius: 10px;
            border: 2px solid rgba(23, 33, 49, 0.5);
        }
    </style>
</head>
<body class="text-text-light font-sans antialiased">

    <div class="max-w-7xl mx-auto p-4 md:p-8 min-h-screen flex flex-col">
        <div class="glass-card p-6 md:p-8 w-full flex-grow">

            <!-- Global Header -->
            <header class="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-primary-blue/30 pb-4 mb-6">
                <h1 class="text-3xl md:text-4xl font-mono text-primary-blue flex items-center">
                    // Exo-Trace AI Platform
                </h1>
                <nav class="mt-4 sm:mt-0 space-x-6 text-sm font-bold">
                    <button class="nav-item active hover:text-primary-blue transition duration-200" onclick="showView('dashboard', this)">ANALYSIS DASHBOARD</button>
                    <button class="nav-item hover:text-primary-blue transition duration-200" onclick="showView('catalog', this)">EXPLORATION CATALOG</button>
                    <button class="nav-item hover:text-primary-blue transition duration-200" onclick="showView('diagnostics', this)">MODEL DIAGNOSTICS</button>
                </nav>
            </header>

            <!-- Main Content Area -->
            <main id="app-container">
                <!-- 1. ANALYSIS DASHBOARD VIEW -->
                <div id="dashboard" class="view">
                    <section class="grid grid-cols-1 lg:grid-cols-3 gap-6">

                        <!-- Column 1: Input and Score -->
                        <div class="lg:col-span-1 space-y-6">

                            <!-- Input Card -->
                            <div class="p-6 rounded-2xl bg-card-bg border border-primary-blue/40 shadow-xl">
                                <h2 class="text-xl font-semibold mb-4 text-primary-blue font-mono">// TARGET SYSTEM INPUT</h2>
                                <label for="star-id" class="block text-sm font-mono text-text-muted mb-2">KIC / TOI ID or Celestial Name</label>
                                <input type="text" id="star-id" placeholder="e.g., TOI-700d" value="TOI-700d"
                                    class="w-full p-3 pl-4 bg-bg-dark/70 border border-primary-blue/40 rounded-xl text-text-light font-mono placeholder-text-muted mb-6 focus:ring-primary-blue focus:border-primary-blue transition">
                                
                                <button id="run-analysis-btn"
                                        class="w-full bg-primary-blue text-bg-dark font-extrabold py-3 rounded-xl hover:bg-primary-blue/90 transition-all duration-300 shadow-xl shadow-primary-blue/30 text-lg">
                                    RUN AI CLASSIFICATION
                                </button>
                            </div>

                            <!-- Habitability Score -->
                            <div class="p-6 rounded-2xl bg-card-bg border border-secondary-green/40 text-center shadow-xl">
                                <h2 class="text-xl font-semibold mb-4 text-secondary-green font-mono">// HABITABILITY SCORE</h2>
                                <div class="habitable-score-circle w-40 h-40 mx-auto rounded-full flex items-center justify-center border-4 border-secondary-green/80 bg-bg-dark/50">
                                    <p id="hab-score" class="text-7xl font-extrabold text-secondary-green font-mono glowing-text">87</p>
                                </div>
                                <p id="hab-class" class="mt-4 text-lg text-secondary-green font-bold">Terran Class: HIGH PRIORITY</p>
                            </div>

                            <!-- Classification Status -->
                            <div id="classification-result" class="p-4 rounded-xl bg-card-bg border border-secondary-green/40 shadow-lg">
                                <p class="text-base text-text-muted font-mono">// AI VERDICT</p>
                                <p id="ai-verdict" class="text-3xl font-bold text-secondary-green mt-1">PLANET CONFIRMED</p>
                                <p id="ai-confidence" class="text-sm text-text-muted mt-1">98.7% Confidence</p>
                            </div>
                        </div>

                        <!-- Column 2 & 3: Visualization and Interpretation -->
                        <div class="lg:col-span-2 space-y-6">

                            <!-- Light Curve and Parameters -->
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                <!-- Light Curve Plot (2/3 width) -->
                                <div class="md:col-span-2 p-6 rounded-2xl bg-card-bg border border-primary-blue/40 shadow-xl flex flex-col">
                                    <h2 class="text-xl font-semibold mb-4 text-primary-blue font-mono">// LIGHT CURVE ANALYSIS (TRANSIT VIEW)</h2>
                                    <div class="flex-grow chart-placeholder rounded-lg flex items-center justify-center overflow-hidden relative">
                                        <!-- Simulated Light Curve/Transit -->
                                        <div class="w-full h-full p-4">
                                            <svg id="light-curve-svg" width="100%" height="100%" viewBox="0 0 100 100" class="text-primary-blue">
                                                <!-- U-shaped Transit Dip -->
                                                <polyline fill="none" stroke="currentColor" stroke-width="0.8" stroke-linecap="round" points="0,50 10,50 20,49 30,40 40,30 45,30 50,30 55,30 60,40 70,49 80,50 90,50 100,50"/>
                                                <path d="M48 40 L52 40 L52 65 L48 65 Z" fill="rgba(34, 211, 238, 0.3)" />
                                                <text x="80" y="20" class="text-xs fill-text-light">Flux Normalized</text>
                                                <text x="5" y="95" class="text-xs fill-text-light">Time (Hours)</text>
                                            </svg>
                                        </div>
                                        <p class="absolute bottom-2 text-xs text-text-muted">Simulated data for visual proof of concept.</p>
                                    </div>
                                    <p class="mt-2 text-xs text-text-muted">Current Target: <span id="current-target-name">TOI-700d</span></p>
                                </div>
                                
                                <!-- Key Parameters (1/3 width) -->
                                <div class="md:col-span-1 p-6 rounded-2xl bg-card-bg border border-primary-blue/40 shadow-xl space-y-4">
                                    <h2 class="text-xl font-semibold text-primary-blue font-mono">// KEY PARAMETERS</h2>
                                    <div class="space-y-3">
                                        <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">P_ORB (Days)</p><p id="p-orb" class="text-secondary-green font-bold">37.24</p></div>
                                        <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">P_RAD ($R_e$)</p><p id="p-rad" class="text-secondary-green font-bold">1.14</p></div>
                                        <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">T_EQ (K)</p><p id="t-eq" class="text-secondary-green font-bold">277</p></div>
                                        <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">STAR_TYPE</p><p id="star-type" class="text-primary-blue font-bold">M-Dwarf</p></div>
                                    </div>
                                </div>
                            </div>

                            <!-- XAI Interpretation and Top Catalog -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- XAI Interpretation -->
                                <div class="p-6 rounded-2xl bg-card-bg border border-primary-blue/40 shadow-xl">
                                    <h2 class="text-xl font-semibold mb-4 text-primary-blue font-mono">// AI INTERPRETATION (XAI)</h2>
                                    <div class="bg-bg-dark/70 p-4 rounded-lg text-sm font-mono text-text-light border-l-4 border-primary-blue min-h-[150px]">
                                        <p class="text-primary-blue mb-2 font-bold">// FEATURE IMPORTANCE:</p>
                                        <ul id="xai-list" class="list-disc list-inside text-xs text-text-muted pl-2 space-y-1">
                                            <li><span class="text-secondary-green">T_EQ: 32%</span> (Primary driver for habitable zone proximity)</li>
                                            <li><span class="text-secondary-green">P_RAD: 28%</span> (Size consistent with rocky planet)</li>
                                            <li><span class="text-accent-orange">Transit Shape: 15%</span> (Symmetry rejects binary star hypothesis)</li>
                                        </ul>
                                    </div>
                                </div>

                                <!-- Top 5 Habitable Worlds -->
                                <div class="p-6 rounded-2xl bg-card-bg border border-secondary-green/40 shadow-xl">
                                    <h2 class="text-xl font-semibold mb-4 text-secondary-green font-mono">// TOP HABITABLE WORLDS</h2>
                                    <div class="space-y-3 overflow-y-auto max-h-[200px] pr-2">
                                        <div class="flex justify-between items-center p-3 bg-bg-dark/70 rounded-lg font-mono text-sm border-l-4 border-secondary-green">
                                            <span class="text-secondary-green font-bold">#1 Kepler-186f</span>
                                            <span class="text-text-muted">Score: 92</span>
                                            <span class="text-primary-blue">R=1.11 $R_e$</span>
                                        </div>
                                        <div class="flex justify-between items-center p-3 bg-bg-dark/70 rounded-lg font-mono text-sm border-l-4 border-secondary-green">
                                            <span class="text-secondary-green font-bold">#2 Proxima Centauri b</span>
                                            <span class="text-text-muted">Score: 89</span>
                                            <span class="text-primary-blue">R=1.30 $R_e$</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>

                <!-- 2. EXPLORATION CATALOG VIEW -->
                <div id="catalog" class="view hidden">
                    <h2 class="text-3xl font-bold text-neon-pink mb-6 font-mono">// EXPLORATION CATALOG: AI-RANKED WORLDS</h2>
                    
                    <!-- Filters -->
                    <div class="p-4 mb-6 rounded-xl bg-card-bg border border-primary-blue/40 flex flex-wrap gap-4 text-sm font-mono">
                        <span class="text-text-muted">FILTER BY:</span>
                        <select class="bg-bg-dark/70 p-2 rounded-lg border border-primary-blue/30 text-secondary-green">
                            <option>Habitability Score (High to Low)</option>
                            <option>Planet Radius ($R_e$)</option>
                            <option>Star Type (M-Dwarf)</option>
                        </select>
                        <input type="range" min="50" max="100" value="80" class="w-40">
                        <span class="text-light">Min Score: 80</span>
                    </div>

                    <!-- Catalog Table -->
                    <div class="bg-card-bg rounded-xl border border-primary-blue/40 overflow-hidden">
                        <table class="min-w-full text-sm text-left text-text-light font-mono">
                            <thead class="text-xs uppercase bg-bg-dark/90 text-primary-blue">
                                <tr>
                                    <th scope="col" class="px-6 py-3">Rank / Name</th>
                                    <th scope="col" class="px-6 py-3">AI Score</th>
                                    <th scope="col" class="px-6 py-3">P. Radius ($R_e$)</th>
                                    <th scope="col" class="px-6 py-3">Equilibrium Temp (K)</th>
                                    <th scope="col" class="px-6 py-3">Orbital Period (Days)</th>
                                    <th scope="col" class="px-6 py-3">Status</th>
                                    <th scope="col" class="px-6 py-3">Action</th>
                                </tr>
                            </thead>
                            <tbody id="catalog-table-body">
                                <!-- Data rows are populated by JavaScript -->
                            </tbody>
                        </table>
                        <p id="catalog-status" class="p-4 text-center text-text-muted">Loading catalog data...</p>
                    </div>
                </div>

                <!-- 3. MODEL DIAGNOSTICS VIEW -->
                <div id="diagnostics" class="view hidden">
                    <h2 class="text-3xl font-bold text-neon-pink mb-6 font-mono">// MODEL DIAGNOSTICS: SCIENTIFIC VALIDATION</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        
                        <!-- Metric Summary -->
                        <div class="md:col-span-1 p-6 rounded-2xl bg-card-bg border border-neon-pink/40 shadow-xl space-y-4">
                            <h3 class="text-xl font-semibold text-neon-pink font-mono mb-2">TRAINING PERFORMANCE</h3>
                            <div class="space-y-3">
                                <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">Accuracy</p><p class="text-secondary-green font-bold text-lg">95.2%</p></div>
                                <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">Precision</p><p class="text-secondary-green font-bold text-lg">94.8%</p></div>
                                <div class="bg-bg-dark/70 p-3 rounded-lg font-mono flex justify-between"><p class="text-text-muted">Recall</p><p class="text-secondary-green font-bold text-lg">96.1%</p></div>
                            </div>
                        </div>

                        <!-- Confusion Matrix Placeholder -->
                        <div class="md:col-span-2 p-6 rounded-2xl bg-card-bg border border-neon-pink/40 shadow-xl">
                            <h3 class="text-xl font-semibold mb-4 text-neon-pink font-mono">CONFUSION MATRIX (Validation Set)</h3>
                            <div class="chart-placeholder h-[300px] flex items-center justify-center relative">
                                <div class="p-6 bg-bg-dark/70 rounded-xl text-center font-mono">
                                    <p class="text-text-light mb-2">Simulated Confusion Matrix</p>
                                    <div class="grid grid-cols-2 gap-2 text-sm">
                                        <div class="p-2 bg-secondary-green/20 border border-secondary-green">True Positives: <span class="font-bold text-secondary-green">1450</span></div>
                                        <div class="p-2 bg-accent-orange/20 border border-accent-orange">False Positives (FP): <span class="font-bold text-accent-orange">75</span></div>
                                        <div class="p-2 bg-accent-orange/20 border border-accent-orange">False Negatives (FN): <span class="font-bold text-accent-orange">60</span></div>
                                        <div class="p-2 bg-primary-blue/20 border border-primary-blue">True Negatives: <span class="font-bold text-primary-blue">3015</span></div>
                                    </div>
                                    <p class="mt-2 text-xs text-text-muted">Low FP/FN counts prove robustness against false signals.</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Data Distribution Chart Placeholder -->
                        <div class="md:col-span-3 p-6 rounded-2xl bg-card-bg border border-neon-pink/40 shadow-xl">
                            <h3 class="text-xl font-semibold mb-4 text-neon-pink font-mono">FEATURE DISTRIBUTION (PLANET RADIUS)</h3>
                            <div class="chart-placeholder h-[200px] flex items-center justify-center relative">
                                <p class="text-sm font-mono text-text-muted">CHART: Histogram comparing distribution of Planet Radius ($R_e$) for True Positives vs. False Positives</p>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Main JavaScript Logic -->
    <script>
        // Data for simulated interactivity
        const planetData = [
            { name: 'Kepler-186f', score: 92, radius: 1.11, temp: 224, period: 130.0, status: 'CONFIRMED', confidence: 99.1, verdict_color: 'text-secondary-green' },
            { name: 'Proxima Centauri b', score: 89, radius: 1.30, temp: 234, period: 11.2, status: 'CONFIRMED', confidence: 98.9, verdict_color: 'text-secondary-green' },
            { name: 'TOI-700d', score: 87, radius: 1.14, temp: 277, period: 37.2, status: 'CANDIDATE', confidence: 97.5, verdict_color: 'text-primary-blue' },
            { name: 'TRAPPIST-1e', score: 85, radius: 0.92, temp: 251, period: 6.1, status: 'CONFIRMED', confidence: 96.0, verdict_color: 'text-secondary-green' },
            { name: 'Kepler-22b', score: 82, radius: 2.40, temp: 262, period: 289.9, status: 'CONFIRMED', confidence: 95.5, verdict_color: 'text-secondary-green' },
            { name: 'KOI-3277.01', score: 65, radius: 0.89, temp: 350, period: 11.1, status: 'FALSE POSITIVE', confidence: 75.2, verdict_color: 'text-accent-orange' },
        ];

        // --- View Switching Logic ---
        function showView(viewId, clickedButton = null) {
            document.querySelectorAll('.view').forEach(view => {
                view.classList.add('hidden');
            });
            document.getElementById(viewId).classList.remove('hidden');

            // Update navigation bar active state
            document.querySelectorAll('.nav-item').forEach(button => {
                button.classList.remove('active');
            });
            if (clickedButton) {
                clickedButton.classList.add('active');
            }
        }
        
        // --- Core Simulation Function ---
        function runAnalysisSimulation() {
            const starIdInput = document.getElementById('star-id');
            const runAnalysisBtn = document.getElementById('run-analysis-btn');

            const starId = starIdInput.value.trim();
            if (!starId) {
                console.error('Please enter a Star ID.');
                return;
            }

            // Disable button and show spinner
            runAnalysisBtn.disabled = true;
            runAnalysisBtn.innerHTML = <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-bg-dark inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> ANALYZING...;

            // Simulate API processing delay (2 seconds)
            setTimeout(() => {
                const targetName = starId;
                
                // Find data or generate a random false positive result if not found
                const resultData = planetData.find(p => p.name.toLowerCase() === targetName.toLowerCase()) || {
                    name: targetName, 
                    score: Math.floor(Math.random() * 30) + 40, // 40-69 score
                    radius: (Math.random() * 5) + 3, // Large radius simulation
                    temp: Math.floor(Math.random() * 200) + 400,
                    period: (Math.random() * 10) + 1,
                    status: 'FALSE POSITIVE', 
                    confidence: (Math.random() * 10) + 80, // 80-90% confidence
                    verdict_color: 'text-accent-orange'
                };

                updateDashboard(resultData);

                // Re-enable button
                runAnalysisBtn.disabled = false;
                runAnalysisBtn.innerHTML = RUN AI CLASSIFICATION;

            }, 2000); 
        }

        // --- Dashboard Update Function ---
        function updateDashboard(data) {
            const aiVerdict = document.getElementById('ai-verdict');
            const aiConfidence = document.getElementById('ai-confidence');
            const habScore = document.getElementById('hab-score');
            const habClass = document.getElementById('hab-class');
            const classificationResultDiv = document.getElementById('classification-result');
            const lightCurveSVG = document.getElementById('light-curve-svg');

            // Determine colors and class based on status
            const isConfirmed = data.status.includes('CONFIRMED') || data.status.includes('CANDIDATE');
            const verdictColorClass = isConfirmed ? 'text-secondary-green' : 'text-accent-orange';
            const borderColorClass = isConfirmed ? 'border-secondary-green/40' : 'border-accent-orange/40';

            // 1. Update Score and Class
            habScore.textContent = data.score;
            habClass.textContent = data.score > 80 ? 'Terran Class: HIGH PRIORITY' : (data.score > 65 ? 'Terran Class: MEDIUM PRIORITY' : 'Terran Class: LOW PRIORITY');
            
            // 2. Update Verdict
            aiVerdict.textContent = data.status;
            aiVerdict.className = text-3xl font-bold mt-1 ${verdictColorClass};
            aiConfidence.textContent = ${data.confidence || 98.0}% Confidence;
            classificationResultDiv.classList.remove('border-secondary-green/40', 'border-accent-orange/40');
            classificationResultDiv.classList.add(borderColorClass);

            // 3. Update Key Parameters (Simulated)
            document.getElementById('current-target-name').textContent = data.name;
            document.getElementById('p-orb').textContent = data.period ? data.period.toFixed(2) : 'N/A';
            document.getElementById('p-rad').textContent = data.radius ? data.radius.toFixed(2) : 'N/A';
            document.getElementById('t-eq').textContent = data.temp ? data.temp.toFixed(0) : 'N/A';
            document.getElementById('star-type').textContent = isConfirmed ? 'M-Dwarf' : 'G-Type (Sim.)';
            
            // 4. Update Light Curve Visualization (Simulated U-Shape vs V-Shape)
            // U-shape for confirmed/candidate, V-shape for false positive
            const pathPoints = isConfirmed ? 
                "0,50 10,50 20,49 30,40 40,30 45,30 50,30 55,30 60,40 70,49 80,50 90,50 100,50" : // U-shape
                "0,50 10,50 30,40 50,20 70,40 90,50 100,50"; // V-shape (sharp point)
            
            lightCurveSVG.querySelector('polyline').setAttribute('points', pathPoints);

            // 5. Update XAI (Simplified based on status)
            const xaiList = document.getElementById('xai-list');
            if (!isConfirmed) {
                 xaiList.innerHTML = `
                    <li><span class="text-accent-orange">Planet Radius: ${Math.floor(data.radius * 3)}%</span> (Inconsistent with rocky core, likely Gas Giant)</li>
                    <li><span class="text-accent-orange">Transit Shape: 20%</span> (Sharp V-shape rejects planetary model)</li>
                 `;
            } else {
                 xaiList.innerHTML = `
                    <li><span class="text-secondary-green">T_EQ: 32%</span> (Primary driver for habitable zone proximity)</li>
                    <li><span class="text-secondary-green">P_RAD: 28%</span> (Size consistent with rocky planet)</li>
                    <li><span class="text-primary-blue">Transit Shape: 15%</span> (Symmetry confirms planetary transit)</li>
                 `;
            }
        }

        // --- Catalog Population Function (Simulated) ---
        function populateCatalog() {
            const tableBody = document.getElementById('catalog-table-body');
            const statusElement = document.getElementById('catalog-status');
            
            statusElement.textContent = "Loading catalog data...";
            tableBody.innerHTML = ''; // Clear existing rows

            // Simulate loading delay
            setTimeout(() => {
                let rowsHtml = '';
                planetData.sort((a, b) => b.score - a.score).forEach((data, index) => {
                    const rank = index + 1;
                    const statusClass = data.status.includes('CONFIRMED') ? 'text-secondary-green' : data.status.includes('CANDIDATE') ? 'text-primary-blue' : 'text-accent-orange';

                    rowsHtml += `
                        <tr class="border-b border-primary-blue/30 hover:bg-bg-dark/70">
                            <th class="px-6 py-4 font-medium text-text-light whitespace-nowrap">#${rank} ${data.name}</th>
                            <td class="px-6 py-4 ${statusClass}">${data.score}</td>
                            <td class="px-6 py-4">${data.radius.toFixed(2)}</td>
                            <td class="px-6 py-4">${data.temp.toFixed(0)}</td>
                            <td class="px-6 py-4">${data.period.toFixed(1)}</td>
                            <td class="px-6 py-4"><span class="${statusClass}">${data.status}</span></td>
                            <td class="px-6 py-4"><button class="text-primary-blue hover:text-primary-blue/80" onclick="loadPlanetToDashboard('${data.name}')">View Details</button></td>
                        </tr>
                    `;
                });
                
                tableBody.innerHTML = rowsHtml;
                statusElement.textContent = Displaying ${planetData.length} analyzed worlds.;

            }, 500);
        }

        // --- Function to load data from catalog back to dashboard ---
        window.loadPlanetToDashboard = function(name) {
            const data = planetData.find(p => p.name === name);
            if (data) {
                document.getElementById('star-id').value = name;
                showView('dashboard', document.querySelector('button[onclick="showView(\'dashboard\', this)"]'));
                updateDashboard(data);
            }
        }

        // --- Event Listeners and Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('run-analysis-btn').addEventListener('click', runAnalysisSimulation);
            
            // Populate catalog when the catalog tab is clicked
            const catalogButton = document.querySelector('button[onclick="showView(\'catalog\', this)"]');
            catalogButton.addEventListener('click', populateCatalog);

            // Initial load of the dashboard data (default to the third planet in the list)
            updateDashboard(planetData[2]); 
        });
    </script>
</body>
</html>
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# ======================================================
# 1️⃣ Load Dataset
# ======================================================
df = pd.read_csv(r"C:\Users\User\OneDrive\Desktop\Exo-Trace\final_dataset.csv")

# Candidate features (keep only existing ones)
candidate_features = [
    'Planet_Radius_Earth', 'Planet_Mass_Earth', 'Orbital_Period_Days',
    'Orbital_Distance_AU', 'Orbital_Inclination_Deg', 'Transit_Depth',
    'Planet_Equilibrium_Temp_K', 'Insolation_Flux_EarthUnits', 'Orbital_Eccentricity'
]

features = [col for col in candidate_features if col in df.columns]
if len(features) < 3:
    raise ValueError("Not enough valid feature columns found in dataset.")

print(f"✅ Using Features for Training: {features}")

# Drop rows with missing values in features
df = df.dropna(subset=features)

# Ensure 'Planetary_Class' exists (1=planet, 0=not)
if 'Planetary_Class' not in df.columns:
    raise ValueError("Dataset must contain a 'Planetary_Class' column.")

# ======================================================
# 2️⃣ Split Dataset
# ======================================================
X = df[features].values
y = df['Planetary_Class'].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

X_train = torch.FloatTensor(X_train)
y_train = torch.FloatTensor(y_train).unsqueeze(1)
X_test = torch.FloatTensor(X_test)
y_test = torch.FloatTensor(y_test).unsqueeze(1)

# ======================================================
# 3️⃣ Define Neural Network Model
# ======================================================
class PlanetClassifier(nn.Module):
    def init(self, input_dim):
        super(PlanetClassifier, self).init()
        self.network = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.network(x)

model = PlanetClassifier(input_dim=len(features))
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# ======================================================
# 4️⃣ Train the Model
# ======================================================
epochs = 200
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 10 == 0:
        with torch.no_grad():
            model.eval()
            preds = (model(X_test) > 0.5).float()
            acc = (preds.eq(y_test).sum() / y_test.shape[0]).item() * 100
        print(f"Epoch [{epoch+1}/{epochs}] - Loss: {loss.item():.4f} - Test Accuracy: {acc:.2f}%")

# ======================================================
# 5️⃣ Fixed Habitability Scoring Function
# ======================================================
EARTH_BASELINE = {
    'Planet_Radius_Earth': 1.0,
    'Planet_Mass_Earth': 1.0,
    'Orbital_Period_Days': 365.25,
    'Orbital_Distance_AU': 1.0,
    'Orbital_Inclination_Deg': 90.0,
    'Transit_Depth': 0.01,
    'Planet_Equilibrium_Temp_K': 288.0,
    'Insolation_Flux_EarthUnits': 1.0,
    'Orbital_Eccentricity': 0.0167
}

def habitability_score(row):
    """Compute habitability score relative to Earth."""
    score = 0
    total_weight = 0
    weights = {col: 1/len(features) for col in features}

    for col, weight in weights.items():
        if col in row and pd.notnull(row[col]):
            earth_val = EARTH_BASELINE.get(col, row[col])
            val = row[col]
            s = 100 * np.exp(-abs(val - earth_val) / (0.5 * earth_val + 1e-6))
            score += s * weight
            total_weight += weight

    if total_weight == 0:
        return 0
    return round(score / total_weight, 2)

# ======================================================
# 6️⃣ Search and Prediction Function
# ======================================================
def search_body():
    while True:
        user_input = input("\n🔍 Enter the name of the celestial body (or 'exit' to quit): ").strip()
        if user_input.lower() == 'exit':
            print("Exiting search...")
            break

        result = df[df['Planet_Name'].str.lower() == user_input.lower()]
        if result.empty:
            print(f"⚠ '{user_input}' not found in dataset.")
            continue

        # Prepare data for prediction
        sample_tensor = torch.FloatTensor(scaler.transform(result[features].values))
        with torch.no_grad():
            model.eval()
            prediction = model(sample_tensor)
            prediction_value = prediction[0,0].item()

        if prediction_value > 0.5:
            print(f"\n✅ {user_input} is classified as a Planet.")
            print(f"🌍 Habitability Score: {habitability_score(result.iloc[0])}/100")
        else:
            print(f"\n❌ {user_input} is NOT classified as a Planet.")

# ======================================================
# 7️⃣ Run Interactive Search
# ======================================================
print("\n=== ✅ Model Training Completed Successfully ===")
search_body()
